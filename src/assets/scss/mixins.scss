@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "functions" as f;

// Color Scheme
@mixin set-colors($colors) {
	@each $name, $color in $colors {
		--color-#{$name}: #{$color};
	}
}

// Font Face
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);
	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
		font-display: swap;
	}
}

// Flex
@mixin flex($d: null, $fd: null, $fw: null, $ff: null, $jc: null, $ai: null, $gap: null) {
	@if $d == "inline" {
		display: inline-flex;
	} @else {
		display: flex;
	}

	flex: {
		direction: $fd;
		wrap: $fw;
		flow: $ff;
	}
	justify-content: $jc;
	align-items: $ai;
	gap: $gap;
}

// Flex Childs
@mixin flex-child($o: null, $fg: null, $fs: null, $fb: null, $as: null, $js: null, $f: null) {
	order: $o;
	flex: $f {
		grow: $fg;
		shrink: $fs;
		basis: $fb;
	}
	align-self: $as;
	justify-self: $js;
}

// Grid
@mixin grid($ga: null, $gc: null, $gap: null, $gar: null, $gac: null, $ai: null, $ji: null) {
	display: grid;
	grid-template-columns: $gc;
	grid-template-areas: $ga;
	grid-auto-rows: $gar;
	grid-auto-columns: $gac;
	gap: $gap;
	align-items: $ai;
	justify-items: $ji;
}

// Grid Child
@mixin grid-child($ga: null, $gc: null, $gr: null, $js: null, $as: null, $ps: null) {
	grid-column: $gc;
	grid-row: $gr;
	grid-area: $ga;
	justify-self: $js;
	align-self: $as;
	place-self: $ps;
}

// Line clamp
@mixin line-clamp($l: null, $o: hidden) {
	display: -webkit-box;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: $l;
	overflow: $o;
}

// Position
@mixin position($position, $t: null, $r: null, $b: null, $l: null, $i: null) {
	position: $position;
	inset: $i;
	top: $t;
	right: $r;
	bottom: $b;
	left: $l;
}

// Background image
@mixin bg-image($img: null, $bg: null, $bc: null, $br: null, $bs: null, $bp: null, $bm: null, $bo: null, $ba: null) {
	background: {
		image: $bg, url("#{$img}");
		color: $bc;
		repeat: $br or no-repeat;
		size: $bs;
		position: $bp;
		blend-mode: $bm;
		origin: $bo;
		attachment: $ba;
	}
}

// Media queries
@mixin media($size) {
	$max-width-sm: 576px;
	$max-width-md: 768px;
	$max-width-lg: 992px;
	$max-width-xl: 1281px;
	// For container @media
	@if $size == xs {
		@media (max-width: ($max-width-sm - 1)) {
			@content;
		}
	} @else if $size == sm {
		@media (min-width: $max-width-sm) {
			@content;
		}
	} @else if $size == md {
		@media (min-width: $max-width-md) {
			@content;
		}
	} @else if $size == lg {
		@media (min-width: $max-width-lg) {
			@content;
		}
	} @else if $size == xl {
		@media (min-width: $max-width-xl) {
			@content;
		}
	}

	// For content @media
	@if $size == phone {
		@media (max-width: ($max-width-sm - 1)) {
			@content;
		}
	} @else if $size == tablet {
		@media (max-width: ($max-width-md - 1)) {
			@content;
		}
	} @else if $size == laptop {
		@media (max-width: ($max-width-lg - 1)) {
			@content;
		}
	} @else if $size == desktop {
		@media (max-width: ($max-width-xl - 1)) {
			@content;
		}
	}
}

// Container
@mixin container {
	$max-container-width-xs: 100%;
	$max-container-width-sm: 512px;
	$max-container-width-md: 704px;
	$max-container-width-lg: 928px;
	$max-container-width-xl: 1224px;
	@include media(xs) {
		max-width: $max-container-width-xs;
		padding: 0 32px;
	}
	@include media(sm) {
		max-width: $max-container-width-sm;
	}
	@include media(md) {
		max-width: $max-container-width-md;
	}
	@include media(lg) {
		max-width: $max-container-width-lg;
	}

	@include media(xl) {
		max-width: $max-container-width-xl;
	}

	margin: 0 auto;
}

// Scrollbar styles
@mixin scrollbar($thumb: null, $track: null, $size: null) {
	$scrollbarWidth: if($size < 5, thin, auto);

	scrollbar {
		width: $scrollbarWidth;
		color: $thumb $track;
	}

	&::-webkit {
		&-scrollbar {
			width: $size;

			&-thumb {
				background-color: $thumb;
				border-radius: $size;
			}

			&-track {
				width: $size + 2;
				background-color: $track;
			}
		}
	}
}
